# Generated by Django 5.2.6 on 2025-09-24 19:10

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='SystemMetrics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('total_api_calls_today', models.PositiveIntegerField(default=0)),
                ('successful_api_calls_today', models.PositiveIntegerField(default=0)),
                ('failed_api_calls_today', models.PositiveIntegerField(default=0)),
                ('avg_response_time_ms', models.FloatField(blank=True, null=True)),
                ('total_content_pieces', models.PositiveIntegerField(default=0)),
                ('total_published_content', models.PositiveIntegerField(default=0)),
                ('total_campaigns', models.PositiveIntegerField(default=0)),
                ('total_embeddings_created', models.PositiveIntegerField(default=0)),
                ('total_images_generated', models.PositiveIntegerField(default=0)),
                ('ai_processing_cost_today', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='AI Processing Cost Today')),
                ('active_users_today', models.PositiveIntegerField(default=0)),
                ('new_users_today', models.PositiveIntegerField(default=0)),
                ('premium_users', models.PositiveIntegerField(default=0)),
                ('system_status', models.CharField(choices=[('healthy', 'Healthy'), ('warning', 'Warning'), ('critical', 'Critical'), ('maintenance', 'Maintenance')], default='healthy', max_length=20)),
                ('metrics_date', models.DateField(default=django.utils.timezone.now, unique=True)),
            ],
            options={
                'verbose_name': 'System Metrics',
                'verbose_name_plural': 'System Metrics',
                'ordering': ['-metrics_date'],
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('company', models.CharField(blank=True, max_length=200, verbose_name='Company')),
                ('job_title', models.CharField(blank=True, max_length=100, verbose_name='Job Title')),
                ('phone_number', models.CharField(blank=True, max_length=20, verbose_name='Phone Number')),
                ('api_quota', models.PositiveIntegerField(default=1000, help_text='Maximum API calls per month', validators=[django.core.validators.MinValueValidator(0)], verbose_name='API Quota per Month')),
                ('api_usage_current_month', models.PositiveIntegerField(default=0, verbose_name='Current Month Usage')),
                ('quota_reset_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Quota Reset Date')),
                ('plan_type', models.CharField(choices=[('free', 'Free'), ('basic', 'Basic'), ('premium', 'Premium'), ('enterprise', 'Enterprise')], default='free', max_length=20, verbose_name='Plan Type')),
                ('is_premium', models.BooleanField(default=False, verbose_name='Premium User')),
                ('timezone', models.CharField(default='America/Sao_Paulo', max_length=50, verbose_name='Timezone')),
                ('language', models.CharField(default='pt-BR', max_length=10, verbose_name='Language')),
                ('email_notifications', models.BooleanField(default=True, verbose_name='Email Notifications')),
                ('preferences', models.JSONField(default=dict, help_text='JSON field for user-specific settings', verbose_name='User Preferences')),
                ('total_content_created', models.PositiveIntegerField(default=0)),
                ('total_images_generated', models.PositiveIntegerField(default=0)),
                ('total_embeddings_created', models.PositiveIntegerField(default=0)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'User Profile',
                'verbose_name_plural': 'User Profiles',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='APIAuditLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('session_id', models.CharField(blank=True, max_length=40, verbose_name='Session ID')),
                ('method', models.CharField(max_length=10, verbose_name='HTTP Method')),
                ('endpoint', models.CharField(max_length=500, verbose_name='API Endpoint')),
                ('full_url', models.URLField(verbose_name='Full URL')),
                ('ip_address', models.GenericIPAddressField(verbose_name='IP Address')),
                ('user_agent', models.TextField(verbose_name='User Agent')),
                ('referer', models.URLField(blank=True, null=True, verbose_name='Referer')),
                ('request_headers', models.JSONField(default=dict, verbose_name='Request Headers')),
                ('request_body', models.JSONField(blank=True, null=True, verbose_name='Request Body')),
                ('response_status', models.PositiveIntegerField(verbose_name='Response Status Code')),
                ('response_size', models.PositiveIntegerField(blank=True, null=True, verbose_name='Response Size (bytes)')),
                ('response_time_ms', models.FloatField(verbose_name='Response Time (ms)')),
                ('db_queries_count', models.PositiveIntegerField(default=0, verbose_name='Database Queries Count')),
                ('db_time_ms', models.FloatField(blank=True, null=True, verbose_name='Database Time (ms)')),
                ('resource_type', models.CharField(blank=True, max_length=50, verbose_name='Resource Type')),
                ('resource_id', models.CharField(blank=True, max_length=100, verbose_name='Resource ID')),
                ('is_suspicious', models.BooleanField(default=False, verbose_name='Suspicious Activity')),
                ('risk_score', models.PositiveSmallIntegerField(default=0, validators=[django.core.validators.MaxValueValidator(100)], verbose_name='Risk Score (0-100)')),
                ('api_version', models.CharField(default='v1', max_length=10, verbose_name='API Version')),
                ('rate_limit_hit', models.BooleanField(default=False, verbose_name='Rate Limit Hit')),
                ('error_message', models.TextField(blank=True, verbose_name='Error Message')),
                ('additional_data', models.JSONField(default=dict, verbose_name='Additional Data')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Timestamp')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'API Audit Log',
                'verbose_name_plural': 'API Audit Logs',
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['user', 'timestamp'], name='core_apiaud_user_id_95cb53_idx'), models.Index(fields=['endpoint', 'method'], name='core_apiaud_endpoin_c02b02_idx'), models.Index(fields=['ip_address', 'timestamp'], name='core_apiaud_ip_addr_9177d4_idx'), models.Index(fields=['response_status', 'timestamp'], name='core_apiaud_respons_8e271e_idx'), models.Index(fields=['is_suspicious', 'risk_score'], name='core_apiaud_is_susp_09c123_idx')],
            },
        ),
        migrations.CreateModel(
            name='Campaign',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200, verbose_name='Campaign Name')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('status', models.CharField(choices=[('planning', 'Planning'), ('active', 'Active'), ('paused', 'Paused'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='planning', max_length=20, verbose_name='Status')),
                ('target_platforms', models.JSONField(default=list, help_text='List of platforms for this campaign', verbose_name='Target Platforms')),
                ('target_audience', models.TextField(blank=True, help_text='Description of target audience', verbose_name='Target Audience')),
                ('budget', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='Budget')),
                ('start_date', models.DateTimeField(verbose_name='Start Date')),
                ('end_date', models.DateTimeField(blank=True, null=True, verbose_name='End Date')),
                ('goals', models.JSONField(default=dict, help_text='JSON field for campaign objectives and KPIs', verbose_name='Campaign Goals')),
                ('tags', models.JSONField(default=list, verbose_name='Tags')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('is_public', models.BooleanField(default=False, help_text='Allow other users to view this campaign', verbose_name='Public Campaign')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='campaigns', to=settings.AUTH_USER_MODEL, verbose_name='Campaign Owner')),
            ],
            options={
                'verbose_name': 'Campaign',
                'verbose_name_plural': 'Campaigns',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['owner', 'status'], name='core_campai_owner_i_a90e68_idx'), models.Index(fields=['start_date', 'end_date'], name='core_campai_start_d_c3f578_idx')],
            },
        ),
        migrations.CreateModel(
            name='SourceSite',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200, verbose_name='Site Name')),
                ('url', models.URLField(unique=True, verbose_name='Site URL')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('category', models.CharField(choices=[('blog', 'Blog'), ('news', 'News'), ('ecommerce', 'E-commerce'), ('corporate', 'Corporate'), ('education', 'Education'), ('technology', 'Technology'), ('marketing', 'Marketing'), ('other', 'Other')], max_length=50, verbose_name='Category')),
                ('is_public', models.BooleanField(default=False, help_text='Allow other users to use this site for scraping', verbose_name='Public Site')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('monitor_frequency', models.PositiveIntegerField(default=3600, help_text='How often to check for new content', validators=[django.core.validators.MinValueValidator(300)], verbose_name='Check Frequency (seconds)')),
                ('last_checked', models.DateTimeField(blank=True, null=True, verbose_name='Last Checked')),
                ('next_check', models.DateTimeField(blank=True, null=True, verbose_name='Next Check')),
                ('content_selectors', models.JSONField(default=dict, help_text='CSS selectors for extracting specific content', verbose_name='Content Selectors')),
                ('exclude_patterns', models.JSONField(default=list, help_text='URL patterns to exclude from scraping', verbose_name='Exclude Patterns')),
                ('custom_headers', models.JSONField(default=dict, help_text='Additional HTTP headers for requests', verbose_name='Custom Headers')),
                ('min_content_length', models.PositiveIntegerField(default=200, verbose_name='Minimum Content Length')),
                ('language', models.CharField(default='pt-BR', max_length=10, verbose_name='Expected Language')),
                ('total_posts_discovered', models.PositiveIntegerField(default=0, verbose_name='Total Posts Discovered')),
                ('successful_extractions', models.PositiveIntegerField(default=0, verbose_name='Successful Extractions')),
                ('failed_extractions', models.PositiveIntegerField(default=0, verbose_name='Failed Extractions')),
                ('last_error', models.TextField(blank=True, verbose_name='Last Error')),
                ('error_count', models.PositiveIntegerField(default=0, verbose_name='Consecutive Error Count')),
                ('auto_create_campaigns', models.BooleanField(default=False, help_text='Automatically create campaigns for scraped content', verbose_name='Auto Create Campaigns')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='owned_sites', to=settings.AUTH_USER_MODEL, verbose_name='Owner')),
            ],
            options={
                'verbose_name': 'Source Site',
                'verbose_name_plural': 'Source Sites',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['owner', 'is_active'], name='core_source_owner_i_cd902a_idx'), models.Index(fields=['next_check'], name='core_source_next_ch_f5a474_idx'), models.Index(fields=['category', 'is_public'], name='core_source_categor_226900_idx')],
            },
        ),
    ]
